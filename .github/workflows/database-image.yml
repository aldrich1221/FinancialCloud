name: Tag Trigger

on:
  push:
    tags:
      - 'database/*/*/*'  # This triggers the workflow for tags that match the pattern

jobs:

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up tags
        id: tags
        run: |
          # Get the current tag
          TAG_NAME=${GITHUB_REF##/*}

          # Debug: Output the tag name
          echo "Tag Name: $TAG_NAME"

          # Split the tag by '/' and export parts as environment variables
          IFS='/' read -ra TAG_PARTS <<< "$TAG_NAME"

          # Debug: Output the array parts
          echo "TAG_PARTS=${TAG_PARTS[@]}"

          # Ensure the correct number of parts
          if [ ${#TAG_PARTS[@]} -eq 6 ]; then
            echo "TAG_SERVICE=${TAG_PARTS[2]}" >> $GITHUB_ENV
            echo "TAG_DATABASE=${TAG_PARTS[3]}" >> $GITHUB_ENV
            echo "TAG_ENV=${TAG_PARTS[4]}" >> $GITHUB_ENV
            
          else
            echo "Unexpected tag format. Please check the tag structure."
            exit 1
          fi
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Convert TAG_MICROSERVICE to lowercase
        run: echo "TAG_MICROSERVICE_LOWER=$(echo ${{ env.TAG_MICROSERVICE }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Set up environment variables
        run: |
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> database_file.txt
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME}}" >> database_file.txt
          echo "TAG_DATABASE=${{ env.TAG_DATABASE }}" >> database_file.txt
          echo "TAG_VERSION=${{ env.TAG_VERSION }}" >> database_file.txt

      - name: Copy file to server
        run: |
          scp -i ~/.ssh/id_rsa database_file.txt deploy@${{ secrets.SERVER_IP }}:~/database_file.txt

      - name: Deploy
        run: |
            ssh -i ~/.ssh/id_rsa deploy@${{ secrets.SERVER_IP }} << 'EOF'
              # Source the environment file
              source database_file.txt
              # Log in to Docker
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              # Determine port based on the service
              if [ "$TAG_DATABASE" = "MongoDB" ]; then
                docker run -d --name mongodb -p 27017:27017 -v /var/lib/mongodb:/data/db mongo
          
              elif [ "$TAG_DATABASE" = "MySql" ]; then
                docker run -d --name mysql -p 3306:3306 -v /var/lib/mysql_data:/var/lib/mysql mysql:8
          
              elif [ "$TAG_MICROSERVICE" = "Redis" ]; then
                ##
                docker run -d --name redisdb -p 27017:27017 -v redisdata:/data/db/redis redis
              fi
            
            EOF


